@using Dpz.Core.WebMore.Models
@using Dpz.Core.WebMore.Service
@using Dpz.Core.WebMore.Helper
@using System.Globalization
@inject IMumbleService _mumbleService
@inject ISnackbar _snackbar;
<div class="handle">
    <ul>
        <li>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="Detail">详情</MudButton>
        </li>
        <li>
            <MudButton
                Size="Size.Small"
                Disabled="@_commentPageLoading"
                Variant="Variant.Filled"
                Color="Color.Primary"
                OnClick="ViewComment">
                @if (_commentPageLoading)
                {
                    <MudProgressCircular Class="ms-n1 " Size="Size.Small" Indeterminate="true"/>
                }
                else
                {
                    <MudText>回复(@Model.CommentCount)</MudText>
                }

            </MudButton>
        </li>
        <li>
            <MudButton
                Size="Size.Small"
                Disabled="@_processing"
                Variant="Variant.Filled"
                Color="Color.Primary"
                OnClick="() => Like(Model.Id)">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1 " Size="Size.Small" Indeterminate="true"/>
                }
                else
                {
                    <MudText>点赞(@Model.Like)</MudText>
                }
            </MudButton>
        </li>
    </ul>
</div>
@if (_commentLoading)
{
    <div class="comments">
        <div class="comment-container">
            <Comment Node="CommentNode.Mumble" Relation="@Model?.Id"></Comment>
        </div>
    </div>
}

@code{

    [Parameter]
    public MumbleModel Model { get; set; }

    private bool _processing = false;

    private bool _commentLoading = false;

    private bool _commentPageLoading = false;

    private int _pageIndex = 1;

    private IPagedList<MumbleCommentModel> _commentSource = new PagedList<MumbleCommentModel>(Array.Empty<MumbleCommentModel>(), 0, 0);

    private async Task Like(string id)
    {
        _processing = true;
        var model = await _mumbleService.LikeAsync(id);
        Model.Like = model.Like;
        _processing = false;
    }

    private void Detail()
    {
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        _snackbar.Add("没必要吧？！", Severity.Normal);
    }

    private Task ViewComment()
    {
        if (!_commentLoading)
        {
            _commentLoading = true;
            // _commentPageLoading = true;
            // _commentSource = await _mumbleService.GetCommentPageAsync(Model.Id, _pageIndex, 5);
            // _commentPageLoading = false;
        }
        else
        {
            _commentLoading = false;
        }

        return Task.CompletedTask;
    }

    private async Task ToPageAsync(int page)
    {
        _commentPageLoading = true;
        _pageIndex = page;
        _commentSource = await _mumbleService.GetCommentPageAsync(Model.Id, _pageIndex, 5);
        _commentPageLoading = false;
    }

}