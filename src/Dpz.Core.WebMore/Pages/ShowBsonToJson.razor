@page "/bson-to-json"
@using System.IO
@using BlazorMonaco.Editor
@using MongoDB.Bson
@using MongoDB.Bson.IO
@using MongoDB.Bson.Serialization

<PageTitle>显示BSON 转 JSON - 个人文章分享</PageTitle>
<div style="margin: 80px auto 0">
    <MudFileUpload T="IBrowserFile" FilesChanged="OnSelectedFile" Accept=".bson">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                选择BSON文件
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
    <div>file size : @_fileSize bytes</div>
    <MudTextField
        @bind-Value="_objectIdValue"
        Label="查看ObjectId创建时间"
        Variant="Variant.Outlined"
        TextChanged="OnObjectIdValueChange"/>
    @if (_parseObjectIdSuccess.HasValue)
    {
        <div>
            @if (_parseObjectIdSuccess == true && _objectId != null)
            {
                <div>ObjectId created UTC time:
                    <span style="color: #00ce64">
                        @_objectId.Value.CreationTime.ToUniversalTime().ToString("yyyy/MM/dd HH:mm:ss")
                    </span>
                </div>
                <div>ObjectId created local
                    time:
                    <span
                        style="color: #00ce64">
                        @_objectId.Value.CreationTime.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss")
                    </span>
                </div>
                <div>ObjectId timestamp:
                    <span style="color: #00ce64">
                        @_objectId.Value.Timestamp.ToString("N")
                    </span>
                </div>
            }
            else if (_parseObjectIdSuccess == false)
            {
                <span>ObjectId 无效</span>
            }
        </div>
    }
    <StandaloneCodeEditor
        @ref="_editor"
        Id="show-bson-editor"
        CssClass="editor"
        ConstructionOptions="EditorConstructionOptions"/>
</div>

@code {
    [Inject] private ISnackbar Snackbar { get; set; }

    private long _fileSize = 0;
    private StandaloneCodeEditor _editor;
    private string _objectIdValue = "";
    private bool? _parseObjectIdSuccess = null;
    private ObjectId? _objectId = null;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        var options = new StandaloneEditorConstructionOptions
        {
            Language = "json",
            GlyphMargin = true,
            Value = "{}",
            AutomaticLayout = true,
            ReadOnly = true,
        };

        if (AppTools.IsDark)
        {
            options.Theme = "vs-dark";
        }

        return options;
    }

    private async Task OnSelectedFile(IBrowserFile arg)
    {
        if (arg == null)
        {
            return;
        }

        if (arg.Size > AppTools.MaxFileSize)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add($"文件过大，请选择小于 {AppTools.MaxFileSize / 1024d / 1024d} MB 的文件", Severity.Warning);
            //await AppTools.ShowMessageBox();
            return;
        }

        await using var stream = arg.OpenReadStream(AppTools.MaxFileSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        _fileSize = memoryStream.Length;
        memoryStream.Position = 0;

        var data = ParseBson();

        var json = data.ToJson(new JsonWriterSettings { Indent = true });
        await _editor.SetValue(json);
        return;

        List<BsonDocument> ParseBson()
        {
            var list = new List<BsonDocument>();
            try
            {
                using var reader = new BsonBinaryReader(memoryStream);
                while (!reader.IsAtEndOfFile())
                {
                    var bsonType = reader.ReadBsonType();
                    if (bsonType == BsonType.EndOfDocument)
                    {
                        break;
                    }

                    var document = ReadBsonDocument(reader);
                    list.Add(document);
                }
            }
            catch (Exception e)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add(e.ToString(), Severity.Warning);
                return list;
            }

            return list;
        }
    }

    private static BsonDocument ReadBsonDocument(BsonBinaryReader reader)
    {
        var context = BsonDeserializationContext.CreateRoot(reader);
        var bsonDocumentSerializer = BsonSerializer.LookupSerializer<BsonDocument>();
        return bsonDocumentSerializer.Deserialize(context);
    }

    private void OnObjectIdValueChange()
    {
        if (ObjectId.TryParse(_objectIdValue, out var oid))
        {
            _objectId = oid;
            _parseObjectIdSuccess = true;
        }
        else
        {
            _parseObjectIdSuccess = false;
        }
    }

}